import asyncio
import random
import time
from typing import Callable
from discord import *
from dislash import MessageInteraction, SelectMenu, SelectOption


def send_msg(destination, text='', emb=None):
    loop = asyncio.get_event_loop()
    asyncio.run_coroutine_threadsafe(destination.send(text, embed=emb), loop)


def send_ad(destination, want=''):
    random.seed(time.time())
    ad_contexes = [f'''
ÊÉ≥Áü•ÈÅìÂ¶Ç‰Ωï{want}ÂóéÔºüÈ¶¨‰∏äË®ÇÈñ± Duke ÁöÑ Channel
ÈñãÂïüÂ∞èÈà¥Èê∫üîî
ÂàÜ‰∫´!
üíñÊµ™Êº´ Duke Â∏∂‰Ω†ÊâæÂõûÂ±¨Êñº‰Ω†ÁöÑÊµ™Êº´ÔºÅüíñ
''',
f'''
ÂêÑ‰ΩçËßÄÁúæÔºåÂ¶ÇÊûú‰Ω†ÈÅáÂà∞‰∏ÄÊ®£ÁöÑÊÉÖÊ≥Å
Âè™Ë¶ÅË®ÇÈñ± Duke ÁöÑ Channel
ÈñãÂïüÂ∞èÈà¥Èê∫üîî
ÂàÜ‰∫´!
Duke Â∞±Êïô‰Ω†ÂÄëÂ¶Ç‰Ωï{want}!
''',
f'''
ÂêÑ‰ΩçËßÄÁúæÔºå‰∏çË¶ÅÊÖåÂºµ
Âè™Ë¶ÅË®ÇÈñ± Duke ÁöÑ Channel
ÈñãÂïüÂ∞èÈà¥Èê∫üîî
ÂàÜ‰∫´!
Êµ™Êº´ Duke ‰øùË≠âÊïô‰Ω†ÂÄëÊÄéÈ∫º{want}!
''',
f'''
ÊÉ≥Â≠∏Êõ¥Â§ö{want}ÁöÑÊµ™Êº´ÊäÄÂ∑ßÂóéÔºü
Ê≠°ËøéË®ÇÈñ± Duke ÁöÑ Channel
ÈñãÂïüÂ∞èÈà¥Èê∫üîî
ÂàÜ‰∫´!
Êµ™Êº´ Duke ‰øùË≠âÊïô‰Ω†ÂÄëÊÄéÈ∫º{want}!
''',
f'''
ÂêÑ‰ΩçËßÄÁúæÔºåÈóúÊñºÂ¶Ç‰Ωï{want}ÈÄôÈ°ûÂûãÁöÑÂïèÈ°å
Ë´ãË®ÇÈñ± Duke ÁöÑ Channel
ÈñãÂïüÂ∞èÈà¥Èê∫üîî
‰ª•ÂèäÂàÜ‰∫´!
üíñÊµ™Êº´ Duke Âπ´‰Ω†ÊâæÂõûÂ±¨Êñº‰Ω†ÁöÑÊµ™Êº´ÔºÅüíñ
''',
f'''
Duke ‰πãÊâÄ‰ª•‰∏ÄÁõ¥Êé®Âª£üíñÊµ™Êº´üíñÈÄô‰ª∂‰∫ã
ÊòØÂõ†ÁÇ∫ Duke Ë¶∫Âæó
ÈÄôÂÄãÊôÇ‰ª£ Á¶ÆÂ¥©Ê®ÇÂ£ûÔºÅüíî
Duke Ë¶∫ÂæóË¶ÅÂõûÊ≠∏Ëã±Âúã 18 ‰∏ñÁ¥ÄÁöÑÈÇ£Á®Æ Á¥≥Â£´È¢®ÁØÑÔºÅ
ÈÇ£Ë©≤ÊÄéÈ∫ºÂÅöÂë¢Ôºü
Âè™Ë¶ÅË®ÇÈñ± Duke ÁöÑ Channel
ÈñãÂïüÂ∞èÈà¥Èê∫üîî
ÂàÜ‰∫´!
Duke Â∞±Êïô‰Ω†ÂÄëÁî®ÊúÄÂÑ™ÈõÖÁöÑÊñπÂºè{want}!
'''
    ]
    embed = Embed(
        title = 'ÊèíÊí≠‰∏ÄÂâáÊµ™Êº´Âª£Âëä',
        description=random.choice(ad_contexes),
        colour=0xed87be
    )
    imgs = [
        'https://assets.zyrosite.com//Yle7bzyK4rSDO7Kl/img-ALpjW0Gk3Rf4WJV6-w800.jpg',
        'https://i.imgur.com/LAuMou5.jpeg',
        'https://i.imgur.com/i4ff0Wp.jpeg',
        'https://i.imgur.com/MOvJG08.jpeg',
        'https://i.imgur.com/g84q6A2.jpeg',
        'https://i.imgur.com/UL9fXwx.jpeg'
    ]
    embed.set_image(url=random.choice(imgs))
    send_msg(destination, emb=embed)

def print_help(ch: TextChannel, user, supported_commands={}):
    send_msg(ch, 
f'''
ÊúâË´ãÊàëÂÄëÁöÑÁ•ûÁßòÂòâË≥ì~
{user.mention} ÈÄôÊ¨°Êúâ‰ªÄÈ∫º‰∫ãÊÉÖË¶ÅÂßîË®ó Duke Âë¢?
Duke ÁõÆÂâçÊîØÊè¥‰ª•‰∏ãÂπæÁ®ÆÊåá‰ª§Ôºö
''' + '\n'.join(['duke ' + cmd for cmd in supported_commands]) + '\n'
    )


def say_hello(channel: TextChannel, args=[], user_stack=[]):
    send_msg(channel, 'Ê≠°ËøéÊî∂Áúã Êµ™Êº´ Duke ! ÊÉ≥Â≠∏Êõ¥Â§öÊµ™Êº´ÊäÄÂ∑ßË®òÂæóË®ÇÈñ±ÊàëÁöÑ channel ÔºåÈñãÂïüÂ∞èÈà¥Èê∫ÔºåÂàÜ‰∫´ÔºÅÊµ™Êº´ Duke Âπ´‰Ω†ÊâæÂõûÂ±¨Êñº‰Ω†ÁöÑÊµ™Êº´')


def clear_stack(channel: TextChannel, args: list, user_stack: list):
    user_stack.clear()
    send_msg(channel, "Â∞ç‰∏çËµ∑")


connections_table = {}

def connect(message, handler):
    connections_table[message.id] = handler


def disconnect(message):
    if message.id in connections_table:
        del connections_table[message]


def get_handler(message):
    if not message.id in connections_table:
        return None
    return connections_table[message.id]


class PrintState:
    def __init__(self, text='', embed=None, inter=None) -> None:
        self.text = text
        self.embed = embed
        self.inter = inter
    
    
    def run(self, message: Message, user_stack=[]):
        if self.inter != None:
            loop = asyncio.get_event_loop()
            asyncio.run_coroutine_threadsafe(
                self.inter.reply(self.text, embed=self.embed),
                loop
            )
        else:
            send_msg(message.channel, self.text, emb=self.embed)


    def require_input(self):
        return False

class MenuState:
    def __init__(self, text: str, options: list, selection_handler: Callable[[MessageInteraction, list], None], place_holder='Ë´ãÈÅ∏Êìá', max_select=1, embed=None,inter=None):
        self.text = text
        self.options = options
        self.selection_handler = selection_handler
        self.place_holder = place_holder
        self.max_select = max_select
        self.embed = embed
        self.inter = inter


    async def async_run(self, message: Message, user_stack):
        sender = message.channel.send
        if self.inter != None:
            sender = self.inter.reply

        msg = await sender(
            self.text, 
            embed=self.embed,
            components=[
                SelectMenu(
                    placeholder=self.place_holder,
                    max_values=self.max_select,
                    options=[SelectOption(option, option) for option in self.options]
                )
            ]
        )
        connect(msg, self.selection_handler)


    def run(self, message: Message, user_stack=[]):
        loop = asyncio.get_event_loop()
        res = asyncio.run_coroutine_threadsafe(self.async_run(message, user_stack), loop)
        

    def require_input(self):
        return False